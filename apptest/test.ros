#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:numcl :dataloader) :silent t)
  )

(defpackage :ros.script.testdata.3759013444
  (:use :numcl :iterate))
(in-package :ros.script.testdata.3759013444)

(defun shift-right (samples-per-action num-noise-bits max-shift)
  (concatenate
   (iter (with e = (eye max-shift :type 'bit))
         (for r = (bernoulli 0.2 (list max-shift num-noise-bits)))
         (for s_t+1 = (concatenate (list (aref e '(0 -2)) r) :axis -1))
         (for s_t   = (concatenate (list (aref e '(1 -1)) r) :axis -1))
         (for a = (reshape (arange (1- max-shift)) (list (1- max-shift) 1)))
         (for tr = (concatenate (list s_t s_t+1 a) :axis -1))
         (repeat samples-per-action)
         (collect tr))))

(defun shift-left (samples-per-action num-noise-bits max-shift)
  (concatenate
   (iter (with e = (eye max-shift :type 'bit))
         (for r = (bernoulli 0.2 (list max-shift num-noise-bits)))
         (for s_t   = (concatenate (list (aref e '(0 -2)) r) :axis -1))
         (for s_t+1 = (concatenate (list (aref e '(1 -1)) r) :axis -1))
         (for a = (reshape (arange (1- max-shift) (* 2 (1- max-shift))) (list (1- max-shift) 1)))
         (for tr = (concatenate (list s_t s_t+1 a) :axis -1))
         (repeat samples-per-action)
         (collect tr))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((argv (mapcar #'parse-integer argv)))
    (dataloader:save (concatenate (list (apply #'shift-right argv)
                                        (apply #'shift-left argv)))
                     "/dev/stdout"
                     "tsv")))

;;; vim: set ft=lisp lisp:
